This library is a general purpose SQL generator. Think of it as a typesafe and expressive SQL DSL (domain specific language), with support for rendering SQL formatted properly for MyBatis3 and Spring's NamedParameterJDBCTemplate.

The library also contains extensions for Kotlin that enable an idiomatic Kotlin DSL for SQL.

The library will generate full DELETE, INSERT, SELECT, and UPDATE statements. The DSL implemented by the library is very similar to native SQL but it includes many functions that allow for very dynamic SQL statements. For example, a typical search can be coded with a query like this (the following code is Kotlin, but Java code is very similar):

   fun search(id: String?, firstName: String?, lastName: String?) =
        select(Customer.id, Customer.firstName, Customer.lastName).from(Customer) {
            where(Customer.active, isEqualTo(true))
            and(Customer.id, isEqualToWhenPresent(id).then{ it?.padStart(5, '0') })
            and(Customer.firstName, isLikeCaseInsensitiveWhenPresent(firstName)
                .then{ "%" + it.trim() + "%" })
            and(Customer.lastName, isLikeCaseInsensitiveWhenPresent(lastName)
                .then{ "%" + it.trim() + "%" })
            orderBy(Customer.lastName, Customer.firstName)
            limit(500)
        }
This query does quite a lot...

It is a search with three search criteria - any combination of search criteria can be used
Only records with an active status will be returned
If id is specified, it will be padded to length 5 with '0' at the beginning of the string
If firstName is specified, it will be used in a case-insensitive search and SQL wildcards will be appended
If lastName is specified, it will be used in a case-insensitive search and SQL wildcards will be appended
The query results are limited to 500 rows
Using the dynamic SQL features of the library eliminates a lot of code that would be required for checking nulls, adding wild cards, etc. This query clearly expresses the intent of the search in just a few lines.

See the following pages for detailed information: